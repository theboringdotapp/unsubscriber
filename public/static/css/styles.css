/* Global Styles and Design System */

/* 1. CSS Variables (Design Tokens) */
:root {
  /* Light mode */
  --background: 0 0% 100%;
  --foreground: 240 10% 3.9%;
  --foreground-rgb: 50, 58, 71; /* For rgba usage */
  --card: 0 0% 100%;
  --card-foreground: 240 10% 3.9%;
  --popover: 0 0% 100%;
  --popover-foreground: 240 10% 3.9%;
  --primary: 240 5.9% 10%;
  --primary-foreground: 0 0% 98%;
  --secondary: 240 4.8% 95.9%;
  --secondary-foreground: 240 5.9% 10%;
  --muted: 240 4.8% 95.9%;
  --muted-foreground: 240 3.8% 46.1%;
  --accent: 240 4.8% 95.9%;
  --accent-foreground: 240 5.9% 10%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;
  --border: 240 5.9% 90%;
  --input: 240 5.9% 90%;
  --ring: 240 5.9% 10%;
  --radius: 0.5rem;
  --success: 142.1 76.2% 36.3%;
  --warning: 38 92% 50%; /* Added Warning */
  --warning-foreground: 38 92% 50%;

  /* Brand color */
  --brand: 221.2 83.2% 53.3%;
  --brand-foreground: 210 40% 98%;

  /* Shadow values */
  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1),
    0 4px 6px -4px rgb(0 0 0 / 0.1);
}

.dark {
  /* Dark mode */
  --background: 240 10% 3.9%;
  --foreground: 0 0% 98%;
  --foreground-rgb: 250, 250, 250; /* For rgba usage */
  --card: 240 10% 3.9%;
  --card-foreground: 0 0% 98%;
  --popover: 240 10% 3.9%;
  --popover-foreground: 0 0% 98%;
  --primary: 0 0% 98%;
  --primary-foreground: 240 5.9% 10%;
  --secondary: 240 3.7% 15.9%;
  --secondary-foreground: 0 0% 98%;
  --muted: 240 3.7% 15.9%;
  --muted-foreground: 250 5% 80.9%;
  --accent: 240 3.7% 15.9%;
  --accent-foreground: 0 0% 98%;
  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 0 0% 98%;
  --border: 240 3.7% 15.9%;
  --input: 240 3.7% 15.9%;
  --ring: 240 4.9% 83.9%;
  --success: 142.1 70.6% 45.3%;
  --warning: 48 96% 89%; /* Added Warning */
  --warning-foreground: 38 92% 50%;

  /* Brand and success colors for dark mode */
  --brand: 217.2 91.2% 59.8%;
  --brand-foreground: 210 40% 98%;

  /* Shadow values - darker for dark mode */
  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.4);
  --shadow: 0 1px 3px 0 rgb(0 0 0 / 0.4), 0 1px 2px -1px rgb(0 0 0 / 0.4);
  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.4), 0 2px 4px -2px rgb(0 0 0 / 0.4);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.4),
    0 4px 6px -4px rgb(0 0 0 / 0.4);
}

/* 2. Base Styles */
body {
  background-color: hsl(var(--background));
  color: hsl(var(--foreground));
  font-family: "Inter", system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI",
    Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif,
    "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* 3. Utility Classes (Keep minimal, rely on Tailwind for most) */
.bg-background {
  background-color: hsl(var(--background));
}
.bg-foreground {
  background-color: hsl(var(--foreground));
}
.bg-card {
  background-color: hsl(var(--card));
}
.bg-primary {
  background-color: hsl(var(--primary));
}
.bg-secondary {
  background-color: hsl(var(--secondary));
}
.bg-muted {
  background-color: hsl(var(--muted));
}
.bg-accent {
  background-color: hsl(var(--accent));
}
.bg-destructive {
  background-color: hsl(var(--destructive));
}
.bg-brand {
  background-color: hsl(var(--brand));
}
.bg-success {
  background-color: hsl(var(--success));
}
.bg-warning {
  background-color: hsl(var(--warning));
}

.text-foreground {
  color: hsl(var(--foreground));
}
.text-card-foreground {
  color: hsl(var(--card-foreground));
}
.text-primary-foreground {
  color: hsl(var(--primary-foreground));
}
.text-secondary-foreground {
  color: hsl(var(--secondary-foreground));
}
.text-muted-foreground {
  color: hsl(var(--muted-foreground));
}
.text-accent-foreground {
  color: hsl(var(--accent-foreground));
}
.text-destructive {
  color: hsl(var(--destructive));
}
.text-destructive-foreground {
  color: hsl(var(--destructive-foreground));
}
.text-brand {
  color: hsl(var(--brand));
}
.text-brand-foreground {
  color: hsl(var(--brand-foreground));
}
.text-success {
  color: hsl(var(--success));
}
.text-warning {
  color: hsl(var(--warning));
}
.text-warning-foreground {
  color: hsl(var(--warning-foreground));
}

.border-border {
  border-color: hsl(var(--border));
}
.ring-ring {
  --tw-ring-color: hsl(var(--ring));
}

/* Focus ring utility */
.focus-ring {
  transition: box-shadow 0.2s ease-in-out;
}

.focus-ring:focus-visible {
  outline: none;
  /* Replicate Tailwind focus ring with CSS variables */
  box-shadow: 0 0 0 2px hsl(var(--background)), 0 0 0 4px hsl(var(--ring));
}

/* Add more base styles or utilities if needed */

/* 4. Components */

/* Buttons */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  white-space: nowrap;
  border-radius: var(--radius);
  font-weight: 500;
  transition-property: color, background-color, border-color,
    text-decoration-color, fill, stroke, opacity, box-shadow, transform;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
  cursor: pointer;
  /* Apply focus ring styles */
  /* Assuming .focus-ring class is added to buttons in HTML for consistency */
}

.btn:disabled,
.btn.is-loading {
  opacity: 0.65;
  pointer-events: none;
  cursor: not-allowed;
}

/* Button Sizes */
.btn-sm {
  height: 2rem; /* 32px */
  padding-left: 0.75rem; /* 12px */
  padding-right: 0.75rem;
  font-size: 0.875rem; /* 14px */
}

.btn-md {
  height: 2.5rem; /* 40px */
  padding-left: 1rem; /* 16px */
  padding-right: 1rem;
  font-size: 0.875rem;
}

.btn-lg {
  height: 2.75rem; /* 44px */
  padding-left: 1.25rem; /* 20px */
  padding-right: 1.25rem;
  font-size: 0.875rem;
}

/* Button Variants */
.btn-primary {
  background-color: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
}
.btn-primary:hover {
  opacity: 0.9;
}

.btn-secondary {
  background-color: hsl(var(--secondary));
  color: hsl(var(--secondary-foreground));
}
.btn-secondary:hover {
  opacity: 0.9; /* Or use a slightly darker/lighter shade of secondary */
  /* background-color: hsl(var(--secondary) / 0.9); */
}

.btn-destructive {
  background-color: hsl(var(--destructive));
  color: hsl(var(--destructive-foreground));
}
.btn-destructive:hover {
  opacity: 0.9;
}

.btn-brand {
  background-color: hsl(var(--brand));
  color: hsl(var(--brand-foreground));
  box-shadow: var(--shadow-sm);
}
.btn-brand:hover {
  opacity: 0.9;
  box-shadow: var(--shadow);
}

.btn-outline {
  border: 1px solid hsl(var(--border));
  background-color: transparent;
  color: hsl(var(--foreground));
  box-shadow: var(--shadow-sm);
}
.btn-outline:hover {
  background-color: hsl(var(--accent));
  color: hsl(var(--accent-foreground));
  box-shadow: var(--shadow);
}

.btn-ghost {
  background-color: transparent;
  color: hsl(var(--foreground));
}
.btn-ghost:hover {
  background-color: hsl(var(--accent));
  color: hsl(var(--accent-foreground));
}

/* Button with Loading Spinner */
.btn .spinner {
  /* Spinner styles defined later */
  display: inline-block;
  vertical-align: -0.125em; /* Align slightly lower */
  margin-right: 0.5em;
}

/* Specific spinner color overrides for solid buttons */
.btn-primary .spinner,
.btn-secondary .spinner,
.btn-destructive .spinner,
.btn-brand .spinner {
  border-color: hsla(var(--primary-foreground), 0.3);
  border-left-color: hsl(
    var(--primary-foreground)
  ); /* Assumes primary-foreground is light */
}

.dark .btn-primary .spinner,
.dark .btn-secondary .spinner,
.dark .btn-destructive .spinner,
.dark .btn-brand .spinner {
  border-color: hsla(var(--primary-foreground), 0.3);
  border-left-color: hsl(
    var(--primary-foreground)
  ); /* Assumes primary-foreground is dark in dark mode */
}

.btn-outline .spinner {
  border-color: hsla(var(--foreground), 0.3);
  border-left-color: hsl(var(--foreground));
}
.dark .btn-outline .spinner {
  border-color: hsla(var(--foreground), 0.3);
  border-left-color: hsl(var(--foreground));
}

/* Card */
.card {
  position: relative;
  border-radius: var(--radius);
  background-color: hsl(var(--card));
  color: hsl(var(--card-foreground));
  box-shadow: var(--shadow);
  border: 1px solid hsl(var(--border));
}

/* Alert */
.alert {
  position: relative;
  width: 100%;
  border-radius: var(--radius);
  padding: 1rem;
  margin-bottom: 1rem;
  display: flex;
  /* Use background instead of potentially transparent card */
  background-color: white;
  align-items: center;
  justify-content: space-between;
  box-shadow: var(--shadow-md);
  opacity: 1;
  transform: translateY(0);
  transition: opacity 0.3s ease, transform 0.3s ease;
}

.dark .alert {
  background-color: rgb(9, 9, 11);
}

.alert.fade-out {
  opacity: 0;
  transform: translateY(-10px);
}

.alert-content {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.alert-icon {
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 1.5rem; /* 24px */
  height: 1.5rem;
}
.alert-icon svg {
  width: 1.25rem; /* 20px */
  height: 1.25rem;
}

.alert-close {
  background: none;
  border: none;
  cursor: pointer;
  color: inherit;
  opacity: 0.5;
  transition: opacity 0.2s ease;
  width: 1.5rem;
  height: 1.5rem;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: var(--radius);
}

.alert-close:hover {
  opacity: 1;
  background-color: hsla(var(--foreground), 0.1);
}

.alert-close svg {
  width: 1rem; /* 16px */
  height: 1rem;
}

/* Alert Variants */
.alert-success {
  /* Force opaque background */

  border-left: 4px solid hsl(var(--success));
  color: hsl(var(--success));
}
.dark .alert-success {
  color: hsl(var(--success));
}

.alert-destructive {
  /* Force opaque background */
  background-color: hsla(var(--destructive), 0.1 / 1);
  border-left: 4px solid hsl(var(--destructive));
  color: hsl(var(--destructive));
}
.dark .alert-destructive {
  color: hsl(var(--destructive));
}

.alert-warning {
  /* Force opaque background */

  border-left: 4px solid hsl(var(--warning));
  color: hsl(var(--warning-foreground));
}
.dark .alert-warning {
  border-left-color: hsl(var(--warning));
  color: hsl(var(--warning-foreground));
}

.alert-info {
  /* Force opaque background */

  border-left: 4px solid hsl(var(--brand));
  color: hsl(var(--brand));
}
.dark .alert-info {
  color: hsl(var(--brand));
}

/* Modal */
.modal-overlay {
  position: fixed;
  inset: 0; /* Replaces top, left, right, bottom */
  background-color: hsla(
    var(--background),
    0.8
  ); /* Use background with alpha */
  backdrop-filter: blur(4px);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 50; /* Ensure it's above other content */
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.3s ease, visibility 0.3s ease;
}

.modal-overlay.visible {
  opacity: 1;
  visibility: visible;
}

/* Style for the modal content card - can reuse .card */
.modal-content {
  /* Typically a .card element is used */
  max-width: 90%; /* Prevent overflow on small screens */
  width: auto; /* Allow content to determine width */
  min-width: 300px; /* Minimum reasonable width */
  max-height: 90vh;
  overflow-y: auto;
  transform: scale(0.95);
  transition: transform 0.3s ease;
}

.modal-overlay.visible .modal-content {
  transform: scale(1);
}

/* Specific Modal IDs (used for JS targeting) */
#result-modal {
  /* Inherits .modal-overlay */
}
#permission-modal {
  /* Inherits .modal-overlay */
}
#modal-content {
  /* Used within #result-modal */
}

/* Forms */
.input {
  display: flex;
  height: 2.5rem; /* 40px */
  width: 100%;
  border-radius: var(--radius);
  border: 1px solid hsl(var(--input));
  background-color: hsl(var(--background)); /* Ensure background */
  padding-left: 0.75rem; /* 12px */
  padding-right: 0.75rem;
  font-size: 0.875rem; /* 14px */
  transition-property: color, background-color, border-color, box-shadow;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

.input:focus {
  outline: none;
  border-color: hsl(var(--ring));
  box-shadow: 0 0 0 1px hsl(var(--ring)); /* Subtle ring inside */
}
.input::placeholder {
  color: hsl(var(--muted-foreground));
  opacity: 0.8;
}

/* Checkbox Customization (if needed beyond basic Tailwind form plugin) */
.form-checkbox {
  /* Using Tailwind plugin is often easier, but basic style: */
  appearance: none;
  padding: 0;
  display: inline-block;
  vertical-align: middle;
  background-origin: border-box;
  user-select: none;
  flex-shrink: 0;
  height: 1rem; /* 16px */
  width: 1rem;
  color: hsl(var(--brand)); /* Checkmark color */
  background-color: hsl(var(--background));
  border: 1px solid hsl(var(--border));
  border-radius: 0.25rem; /* Slightly smaller radius */
  transition: background-color 0.1s, border-color 0.1s;
}

.form-checkbox:checked {
  background-image: url("data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z'/%3e%3c/svg%3e");
  border-color: transparent;
  background-color: currentColor; /* Uses the text color (set to --brand) */
  background-size: 100% 100%;
  background-position: center;
  background-repeat: no-repeat;
}

.form-checkbox:focus {
  outline: none;
  box-shadow: 0 0 0 2px hsl(var(--background)), 0 0 0 4px hsl(var(--ring));
}

.form-checkbox:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Scan Results Page Components */

/* Sender Group */
.sender-group {
  border-left: 3px solid hsl(var(--sender-color-hsl, var(--brand))); /* Color passed via inline style */
  margin-bottom: 1rem;
  border-radius: 0 var(--radius) var(--radius) 0;
  background-color: hsl(var(--card));
  box-shadow: var(--shadow-sm);
  opacity: 0;
  transform: translateY(10px);
  animation: fadeInUp 0.5s ease forwards;
  /* Stagger animation using inline styles or JS if needed */
}

.sender-header {
  padding: 0.75rem 1rem;
  background-color: hsla(
    var(--sender-color-hsl, var(--brand)),
    0.1
  ); /* Color passed via inline style */
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid hsl(var(--border));
}

.sender-name-container {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  cursor: pointer;
}

.sender-name {
  transition: all 0.2s ease;
  font-weight: 500;
  color: hsl(var(--foreground));
  cursor: pointer;
}

.sender-group.sender-selected .sender-name {
  /* Use class on parent */
  text-decoration: line-through;
  opacity: 0.7;
}

.collapse-button {
  cursor: pointer;
  padding: 0.25rem;
  border-radius: var(--radius);
  transition: background-color 0.2s;
  color: hsl(var(--muted-foreground));
}

.collapse-button:hover {
  background-color: hsl(var(--muted));
  color: hsl(var(--accent-foreground));
}

.sender-emails {
  overflow: hidden;
  background-color: hsl(var(--card));
  padding: 0;
}

.sender-emails.collapsed {
  display: none;
}

/* Email Row */
.email-row {
  padding: 0.75rem 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid hsl(var(--border));
  transition: all 0.2s ease;
  cursor: pointer;
  position: relative;
  overflow: hidden;
}

.email-row:last-child {
  border-bottom: none;
}

.email-row:hover {
  background-color: hsl(var(--muted));
}

.email-row:hover::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    90deg,
    transparent,
    hsla(var(--brand), 0.05),
    transparent
  );
  transform: translateX(-100%);
  animation: shimmer 1s ease-out;
}

.email-row.email-selected {
  /* Use class on row */
  background-color: hsla(var(--brand), 0.1);
}

.email-row.email-selected .email-subject {
  /* Target subject within selected row */
  text-decoration: line-through;
  opacity: 0.7;
}

.email-subject {
  /* Add default styling if needed, e.g., for truncation */
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
  flex-grow: 1; /* Allow subject to take space */
  margin-right: 1rem; /* Space before date */
}

/* Tooltip */
.tooltip {
  position: relative;
  display: inline-flex;
  margin-left: 0.5rem;
}

.tooltip-icon {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 1.25rem;
  height: 1.25rem;
  border-radius: 50%;
  background-color: hsl(var(--muted));
  color: hsl(var(--muted-foreground));
  font-size: 0.75rem;
  font-weight: bold;
  cursor: help;
}
.dark .tooltip-icon {
  background-color: hsl(var(--muted));
  color: hsl(var(--muted-foreground));
}

.tooltip-text {
  visibility: hidden;
  width: auto;
  min-width: 200px;
  background-color: hsl(var(--popover));
  color: hsl(var(--popover-foreground));
  border: 1px solid hsl(var(--border));
  box-shadow: var(--shadow-md);
  border-radius: var(--radius);
  padding: 0.75rem;
  position: absolute;
  z-index: 10;
  bottom: 125%; /* Position above */
  left: 50%;
  transform: translateX(-50%);
  opacity: 0;
  transition: opacity 0.3s, visibility 0.3s;
  font-size: 0.875rem;
  font-weight: normal;
  text-align: left;
  pointer-events: none;
}

.tooltip:hover .tooltip-text,
.tooltip:focus-within .tooltip-text {
  /* Show on focus within for accessibility */
  visibility: visible;
  opacity: 1;
}

.tooltip-text::after {
  /* Arrow */
  content: "";
  position: absolute;
  top: 100%;
  left: 50%;
  margin-left: -5px;
  border-width: 5px;
  border-style: solid;
  border-color: hsl(var(--popover)) transparent transparent transparent;
}

/* Checkmark Animation */
.checkmark-container {
  width: 80px;
  height: 80px;
  position: relative;
}

.checkmark {
  width: 100%; /* Fill container */
  height: 100%;
  border-radius: 50%;
  display: block;
  stroke-width: 2;
  stroke: hsl(var(--success));
  stroke-miterlimit: 10;
  box-shadow: inset 0px 0px 0px hsl(var(--success));
  animation: fill 0.4s ease-in-out 0.4s forwards,
    scale 0.3s ease-in-out 0.9s both;
}

.checkmark-circle {
  stroke-dasharray: 166;
  stroke-dashoffset: 166;
  stroke-width: 2;
  stroke-miterlimit: 10;
  stroke: hsl(var(--success));
  fill: none;
  animation: stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;
}

.checkmark-check {
  transform-origin: 50% 50%;
  stroke-dasharray: 48;
  stroke-dashoffset: 48;
  animation: stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards;
}

/* Fixed Action Bar */
#fixed-action-bar {
  position: fixed; /* Ensure it's fixed */
  bottom: 0;
  left: 0;
  right: 0;
  background-color: hsl(var(--card));
  border-top: 1px solid hsl(var(--border));
  box-shadow: var(--shadow-lg);
  z-index: 40; /* Below modals */
  padding: 1rem;
  transform: translateY(100%); /* Start off-screen */
  opacity: 0;
  transition: transform 0.4s ease, opacity 0.4s ease;
}

#fixed-action-bar.visible {
  transform: translateY(0);
  opacity: 1;
}

/* Progress bar within action bar */
.progress-bar-container {
  width: 100%;
  height: 0.375rem; /* 6px */
  background-color: hsl(var(--muted));
  border-radius: 9999px;
  overflow: hidden; /* Ensure inner bar respects radius */
}

.progress-bar-fill {
  height: 100%;
  background-color: hsl(var(--brand));
  border-radius: 9999px;
  transition: width 0.3s ease;
}

/* Add more component styles below */

/* Animations */

/* Keyframes */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes fadeInRight {
  /* Added from static index */
  from {
    opacity: 0;
    transform: translateX(20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes float {
  /* Added from static index */
  0% {
    transform: translateY(0px) rotate(1deg);
  }
  50% {
    transform: translateY(-8px) rotate(-0.5deg);
  }
  100% {
    transform: translateY(0px) rotate(1deg);
  }
}

@keyframes pulse {
  0% {
    transform: scale(0.8);
    opacity: 0.8;
  }
  50% {
    transform: scale(1.2);
    opacity: 1;
  }
  100% {
    transform: scale(0.8);
    opacity: 0.8;
  }
}

@keyframes shimmer {
  100% {
    transform: translateX(100%);
  }
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@keyframes stroke {
  /* For checkmark */
  100% {
    stroke-dashoffset: 0;
  }
}

@keyframes scale {
  /* For checkmark */
  0%,
  100% {
    transform: none;
  }
  50% {
    transform: scale3d(1.1, 1.1, 1);
  }
}

@keyframes fill {
  /* For checkmark */
  100% {
    box-shadow: inset 0px 0px 0px 40px hsla(var(--success), 0.2);
  }
}

@keyframes skeletonPulse {
  0% {
    opacity: 0.7;
  }
  50% {
    opacity: 0.9;
  }
  100% {
    opacity: 0.7;
  }
}

@keyframes textGradientShift {
  /* For footer easter egg */
  0% {
    background-position: 0% center;
  }
  100% {
    background-position: 200% center;
  }
}

/* Animation Utility Classes */
.fade-in-up {
  animation: fadeInUp 0.6s ease-out forwards;
  opacity: 0;
}

.fade-in-right {
  animation: fadeInRight 0.6s ease-out forwards;
  opacity: 0;
}

.fade-in {
  animation: fadeIn 0.6s ease-out forwards;
  opacity: 0;
}

.animation-delay-100 {
  animation-delay: 0.1s;
}
.animation-delay-200 {
  animation-delay: 0.2s;
}
.animation-delay-300 {
  animation-delay: 0.3s;
}

.animated-card {
  /* Hero illustration card */
  animation: float 6s ease-in-out infinite;
}

.pulse-dot {
  /* Hero status dot */
  display: block;
  width: 0.5rem;
  height: 0.5rem;
  border-radius: 9999px;
  background-color: hsl(var(--brand));
  animation: pulse 2s infinite;
}

/* Spinner Component */
.spinner {
  border: 3px solid hsla(var(--brand), 0.2); /* Adjusted border */
  width: 1.25em; /* Relative to font size */
  height: 1.25em;
  border-radius: 50%;
  border-left-color: hsl(var(--brand));
  animation: spin 1s linear infinite;
  display: inline-block;
  vertical-align: middle; /* Added for better alignment */
}

/* Skeleton Loading Styles */
.skeleton-sender {
  border-left: 3px solid hsl(var(--muted));
  animation: skeletonPulse 1.5s infinite ease-in-out;
}

.skeleton-email {
  /* Basic structure, often combined with Tailwind utilities */
}

/* Footer Easter Egg */
.footer-vibe-coded {
  display: inline-flex;
  align-items: center;
  border-radius: 12px;
  font-weight: 500;
  position: relative;
  overflow: hidden;
  transition: all 0.3s ease;
  color: hsl(var(--foreground));
  letter-spacing: 0.5px;
  cursor: default;
}
.footer-vibe-coded:hover {
  background-clip: text;
  -webkit-background-clip: text;
  color: transparent;
  background-image: linear-gradient(
    90deg,
    #ff00aa,
    #ff0066,
    #e100ff,
    #7f00ff,
    #00c3ff,
    #00ffe1,
    #ff00aa
  );
  background-size: 200% auto;
  animation: textGradientShift 3s linear infinite;
  text-shadow: 0 0 5px rgba(255, 0, 170, 0.5);
}

/* Theme Toggle */
.theme-toggle {
  border: none;
  background: none;
  padding: 0.5rem;
  border-radius: var(--radius);
  cursor: pointer;
  transition: background-color 0.2s ease-in-out;
  color: hsl(var(--muted-foreground));
}

.theme-toggle:hover {
  background-color: hsl(var(--muted));
  color: hsl(var(--accent-foreground));
}

.theme-toggle svg {
  height: 1.25rem;
  width: 1.25rem;
  /* color: hsl(var(--foreground)); */ /* Color inherited is fine */
}

/* Hero Grid Pattern */
.bg-grid-pattern {
  background-size: 100px 100px;
  background-image: linear-gradient(
      to right,
      hsla(var(--foreground-rgb), 0.1) 1px,
      transparent 1px
    ),
    linear-gradient(
      to bottom,
      hsla(var(--foreground-rgb), 0.1) 1px,
      transparent 1px
    );
}
.dark .bg-grid-pattern {
  background-image: linear-gradient(
      to right,
      hsla(var(--foreground-rgb), 0.1) 1px,
      transparent 1px
    ),
    linear-gradient(
      to bottom,
      hsla(var(--foreground-rgb), 0.1) 1px,
      transparent 1px
    );
}

/* Keyframe for skeleton pulse */
@keyframes pulse-bg {
  0%,
  100% {
    background-color: hsl(var(--card)); /* Match card background */
    opacity: 1;
  }
  50% {
    background-color: hsl(var(--muted)); /* Pulse to muted color */
    opacity: 0.8;
  }
}

/* Apply animation when parent has .skeleton-loading */
.skeleton-loading .skeleton-sender {
  animation: pulse-bg 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

/* Manual Prose Dark Mode Styles */
/* Apply inverted styles when the dark class is present on a parent */
.dark .prose {
  /* Invert base text color */
  color: hsl(var(--muted-foreground)); /* Or choose a suitable light gray */

  /* Invert link colors */
  a {
    color: hsl(var(--brand)); /* Keep brand color for links */
  }
  a:hover {
    opacity: 0.8;
  }

  /* Invert heading colors */
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    color: hsl(var(--foreground)); /* Use main foreground color */
  }

  /* Invert strong, code, etc. */
  strong,
    code,
    thead, /* Table header */
    figcaption {
    color: hsl(var(--foreground));
  }

  /* Optional: Invert blockquote text color slightly */
  blockquote {
    color: hsl(var(--muted-foreground));
    border-left-color: hsl(var(--border));
  }

  /* Optional: Invert horizontal rule color */
  hr {
    border-color: hsl(var(--border));
  }

  /* Adjust other elements like list bullets if needed */
  ul > li::before {
    background-color: hsl(var(--muted-foreground));
  }
}
